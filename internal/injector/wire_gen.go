// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"product-api-go/internal/database"
	"product-api-go/internal/handler/category"
	"product-api-go/internal/handler/measurement"
	"product-api-go/internal/handler/product"
	category2 "product-api-go/internal/repository/postgres/category"
	measurement2 "product-api-go/internal/repository/postgres/measurement"
	product2 "product-api-go/internal/repository/postgres/product"
)

// Injectors from category_wire.go:

func InitializedCategoriesModule() *category.CategoriesController {
	db := database.InitDatabase()
	categoriesPostgres := category2.NewCategoriesPostgres(db)
	categoriesService := category.NewCategoriesService(categoriesPostgres)
	categoriesController := category.NewCategoriesController(categoriesService)
	return categoriesController
}

// Injectors from measurement_wire.go:

func InitializedMeasurementsModule() *measurement.MeasurementsController {
	db := database.InitDatabase()
	measurementsPostgres := measurement2.NewMeasurementsPostgres(db)
	measurementsService := measurement.NewMeasurementsService(measurementsPostgres)
	measurementsController := measurement.NewMeasurementsController(measurementsService)
	return measurementsController
}

// Injectors from product_wire.go:

func InitializedProductsModule() *product.ProductsController {
	db := database.InitDatabase()
	productsPostgres := product2.NewProductsPostgres(db)
	measurementsPostgres := measurement2.NewMeasurementsPostgres(db)
	categoriesPostgres := category2.NewCategoriesPostgres(db)
	productsService := product.NewProductsService(productsPostgres, measurementsPostgres, categoriesPostgres)
	productsController := product.NewProductsController(productsService)
	return productsController
}
